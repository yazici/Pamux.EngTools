[
    {
        "doc": "Material Expression Abs\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionAbs.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionAbs"
    },
    {
        "doc": "Material output expression for setting absorption properties of solid refractive glass (for the Path Tracer Only).\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionAbsorptionMediumMaterialOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionAbsorptionMediumMaterialOutput"
    },
    {
        "doc": "Material Expression Actor Position WS\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionActorPositionWS.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``origin_type`` (PositionOrigin):  [Read-Write]",
        "name": "MaterialExpressionActorPositionWS"
    },
    {
        "doc": "Material Expression Add\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionAdd.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_a`` (float):  [Read-Write] only used if A is not hooked up\r\n- ``const_b`` (float):  [Read-Write] only used if B is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionAdd"
    },
    {
        "doc": "Material Expression Antialiased Texture Mask\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionAntialiasedTextureMask.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``automatic_view_mip_bias`` (bool):  [Read-Write] Whether the texture should be sampled with per view mip biasing for sharper output with Temporal AA.\r\n- ``channel`` (TextureColorChannel):  [Read-Write]\r\n- ``channel_names`` (ParameterChannelNames):  [Read-Write]\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_mip_value`` (int32):  [Read-Write] only used if MipValue is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``mip_value_mode`` (TextureMipValueMode):  [Read-Write] Defines how the MipValue property is applied to the texture lookup\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the UTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``texture`` (Texture):  [Read-Write]\r\n- ``threshold`` (float):  [Read-Write]",
        "name": "MaterialExpressionAntialiasedTextureMask"
    },
    {
        "doc": "deprecated: 'MaterialExpressionAppend3Vector' was renamed to 'MaterialExpressionMaterialXAppend3Vector'.",
        "name": "MaterialExpressionAppend3Vector"
    },
    {
        "doc": "deprecated: 'MaterialExpressionAppend4Vector' was renamed to 'MaterialExpressionMaterialXAppend4Vector'.",
        "name": "MaterialExpressionAppend4Vector"
    },
    {
        "doc": "Material Expression Append Vector\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionAppendVector.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionAppendVector"
    },
    {
        "doc": "Material Expression Arccosine\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionArccosine.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionArccosine"
    },
    {
        "doc": "Material Expression Arccosine Fast\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionArccosineFast.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionArccosineFast"
    },
    {
        "doc": "Material Expression Arcsine\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionArcsine.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionArcsine"
    },
    {
        "doc": "Material Expression Arcsine Fast\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionArcsineFast.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionArcsineFast"
    },
    {
        "doc": "Material Expression Arctangent\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionArctangent.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionArctangent"
    },
    {
        "doc": "Material Expression Arctangent 2\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionArctangent2.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionArctangent2"
    },
    {
        "doc": "Material Expression Arctangent 2Fast\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionArctangent2Fast.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionArctangent2Fast"
    },
    {
        "doc": "Material Expression Arctangent Fast\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionArctangentFast.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionArctangentFast"
    },
    {
        "doc": "Material Expression Atmospheric Fog Color\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionAtmosphericFogColor.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionAtmosphericFogColor"
    },
    {
        "doc": "Material Expression Atmospheric Light Color\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionAtmosphericLightColor.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionAtmosphericLightColor"
    },
    {
        "doc": "Material Expression Atmospheric Light Vector\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionAtmosphericLightVector.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionAtmosphericLightVector"
    },
    {
        "doc": "Material Expression Bent Normal Custom Output\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionBentNormalCustomOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionBentNormalCustomOutput"
    },
    {
        "doc": "Material Expression Binary Op\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionBinaryOp.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_a`` (float):  [Read-Write] only used if A is not hooked up\r\n- ``const_b`` (float):  [Read-Write] only used if B is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionBinaryOp"
    },
    {
        "doc": "Material Expression Black Body\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionBlackBody.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionBlackBody"
    },
    {
        "doc": "Material Expression Blend Material Attributes\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionBlendMaterialAttributes.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``pixel_attribute_blend_type`` (MaterialAttributeBlend):  [Read-Write] Optionally skip blending attributes of this type.\r\n- ``vertex_attribute_blend_type`` (MaterialAttributeBlend):  [Read-Write] Optionally skip blending attributes of this type.",
        "name": "MaterialExpressionBlendMaterialAttributes"
    },
    {
        "doc": "Material Expression Break Material Attributes\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionBreakMaterialAttributes.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionBreakMaterialAttributes"
    },
    {
        "doc": "Material Expression Bump Offset\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionBumpOffset.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_coordinate`` (uint32):  [Read-Write] only used if Coordinate is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``height_ratio`` (float):  [Read-Write]\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``reference_plane`` (float):  [Read-Write] Perceived height as a fraction of width.",
        "name": "MaterialExpressionBumpOffset"
    },
    {
        "doc": "deprecated: 'MaterialExpressionBurn' was renamed to 'MaterialExpressionMaterialXBurn'.",
        "name": "MaterialExpressionBurn"
    },
    {
        "doc": "Material Expression Camera Position WS\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionCameraPositionWS.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionCameraPositionWS"
    },
    {
        "doc": "Material Expression Camera Vector WS\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionCameraVectorWS.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionCameraVectorWS"
    },
    {
        "doc": "Material Expression Ceil\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionCeil.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionCeil"
    },
    {
        "doc": "Material Expression Channel Mask Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionChannelMaskParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``channel_names`` (ParameterChannelNames):  [Read-Write]\r\n- ``default_value`` (LinearColor):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``mask_channel`` (ChannelMaskParameterColor):  [Read-Write]\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write] The name of the parameter\r\n- ``primitive_data_index`` (uint8):  [Read-Write]\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``use_custom_primitive_data`` (bool):  [Read-Write]",
        "name": "MaterialExpressionChannelMaskParameter"
    },
    {
        "doc": "Material Expression Clamp\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionClamp.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``clamp_mode`` (ClampMode):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``max_default`` (float):  [Read-Write]\r\n- ``min_default`` (float):  [Read-Write]",
        "name": "MaterialExpressionClamp"
    },
    {
        "doc": "Material Expression Clear Coat Normal Custom Output\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionClearCoatNormalCustomOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionClearCoatNormalCustomOutput"
    },
    {
        "doc": "Material Expression Cloud Sample Attribute\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionCloudLayer.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionCloudSampleAttribute"
    },
    {
        "doc": "Material Expression Collection Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionCollectionParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``collection`` (MaterialParameterCollection):  [Read-Write] The Parameter Collection to use.\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write] Name of the parameter being referenced.",
        "name": "MaterialExpressionCollectionParameter"
    },
    {
        "doc": "Material Expression Comment\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionComment.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``color_comment_bubble`` (bool):  [Read-Write] Whether to use Comment Color to color the background of the comment bubble shown when zoomed out.\r\n- ``comment_bubble_visible_in_details_panel`` (bool):  [Read-Write] Whether to show a zoom-invariant comment bubble when zoomed out (making the comment readable at any distance).\r\n- ``comment_color`` (LinearColor):  [Read-Write] Color to style comment with\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``font_size`` (int32):  [Read-Write] Size of the text in the comment box\r\n- ``group_mode`` (bool):  [Read-Write] Whether the comment should move any fully enclosed nodes around when it is moved\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``text`` (str):  [Read-Write]",
        "name": "MaterialExpressionComment"
    },
    {
        "doc": "Material Expression Component Mask\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionComponentMask.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``a`` (bool):  [Read-Write]\r\n- ``b`` (bool):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``g`` (bool):  [Read-Write]\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``r`` (bool):  [Read-Write]",
        "name": "MaterialExpressionComponentMask"
    },
    {
        "doc": "Composite (subgraph) expression. Exists purely for organzational purposes.\nUnder the hood uses reroute expressions for graph compilation. See below\nto understand how a particular reroute's input / output correlates to\nthe inputs / outputs of composites and their pin bases.\n\n     _________________          _________________\n    |   INPUT BASE    |        |   OUTPUT BASE   |\n    +--------+--------+        +--------+--------+\n    |        |   (>)  |   ->   |  (>)   |        |\n    |        |   (>)  |        |  (>)   |        |\n    |        |   (>)  |        |  (>)   |        |\n    |        |   (>)  |        |  (>)   |        |\n    |        |        |        |        |        |\n    +--------+--------+        +--------+--------+\n    | NODE IN:  NONE  |        | NODE IN:  PINS  |\n    | NODE OUT: PINS  |        | NODE OUT: NONE  |\n    |_________________|        |_________________|\n\n                  ^                |\n                  |                v\n             ____________________________\n            |         COMPOSITE          |\n            +---------+--------+---------+\n        ->  |    (>)  |        |  (>)    |  ->\n            |    (>)  |        |  (>)    |\n            |    (>)  |        |  (>)    |\n            |    (>)  |        |  (>)    |\n            |         |        |         |\n            +---------+--------+---------+\n            | NODE IN:  TO INPUT BASE    |\n            | NODE OUT: FROM OUTPUT BASE |\n            |____________________________|\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionComposite.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``subgraph_name`` (str):  [Read-Write]",
        "name": "MaterialExpressionComposite"
    },
    {
        "doc": "Material Expression Constant\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionConstant.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``r`` (float):  [Read-Write]",
        "name": "MaterialExpressionConstant"
    },
    {
        "doc": "Material Expression Constant 2Vector\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionConstant2Vector.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``g`` (float):  [Read-Write]\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``r`` (float):  [Read-Write]",
        "name": "MaterialExpressionConstant2Vector"
    },
    {
        "doc": "Material Expression Constant 3Vector\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionConstant3Vector.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``constant`` (LinearColor):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionConstant3Vector"
    },
    {
        "doc": "Material Expression Constant 4Vector\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionConstant4Vector.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``constant`` (LinearColor):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionConstant4Vector"
    },
    {
        "doc": "Material Expression Constant Bias Scale\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionConstantBiasScale.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``bias`` (float):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``scale`` (float):  [Read-Write]",
        "name": "MaterialExpressionConstantBiasScale"
    },
    {
        "doc": "Material Expression Constant Double\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionGenericConstant.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``value`` (double):  [Read-Write]",
        "name": "MaterialExpressionConstantDouble"
    },
    {
        "doc": "Material Expression Cosine\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionCosine.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``period`` (float):  [Read-Write]",
        "name": "MaterialExpressionCosine"
    },
    {
        "doc": "Material Expression Cross Product\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionCrossProduct.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionCrossProduct"
    },
    {
        "doc": "Material Expression Curve Atlas Row Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionCurveAtlasRowParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``atlas`` (CurveLinearColorAtlas):  [Read-Write]\r\n- ``curve`` (CurveLinearColor):  [Read-Write]\r\n- ``default_value`` (float):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write] The name of the parameter\r\n- ``primitive_data_index`` (uint8):  [Read-Write]\r\n- ``slider_max`` (float):  [Read-Write] Sets the upper bound for the slider on this parameter in the material instance editor.\r\n  The slider will be disabled if SliderMax <= SliderMin.\r\n- ``slider_min`` (float):  [Read-Write] Sets the lower bound for the slider on this parameter in the material instance editor.\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``use_custom_primitive_data`` (bool):  [Read-Write]",
        "name": "MaterialExpressionCurveAtlasRowParameter"
    },
    {
        "doc": "Material Expression Custom\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionCustom.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``additional_defines`` (Array[CustomDefine]):  [Read-Write]\r\n- ``additional_outputs`` (Array[CustomOutput]):  [Read-Write]\r\n- ``code`` (str):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``description`` (str):  [Read-Write]\r\n- ``include_file_paths`` (Array[str]):  [Read-Write]\r\n- ``inputs`` (Array[CustomInput]):  [Read-Write]\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``output_type`` (CustomMaterialOutputType):  [Read-Write]",
        "name": "MaterialExpressionCustom"
    },
    {
        "doc": "Material Expression Custom Output\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionCustomOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionCustomOutput"
    },
    {
        "doc": "Material Expression DBuffer Texture\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDBufferTexture.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``d_buffer_texture_id`` (DBufferTextureId):  [Read-Write] Which DBuffer texture we want to make a lookup into.\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDBufferTexture"
    },
    {
        "doc": "Material Expression DDX\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDDX.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDDX"
    },
    {
        "doc": "Material Expression DDY\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDDY.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDDY"
    },
    {
        "doc": "Material Expression Data Driven Shader Platform Info Switch\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDataDrivenShaderPlatformInfoSwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``ddspi_property_names`` (Array[DataDrivenShaderPlatformInfoInput]):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDataDrivenShaderPlatformInfoSwitch"
    },
    {
        "doc": "Material Expression Decal Color\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDecalColor.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDecalColor"
    },
    {
        "doc": "Material Expression Decal Derivative\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDecalDerivative.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDecalDerivative"
    },
    {
        "doc": "Material Expression Decal Lifetime Opacity\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDecalLifetimeOpacity.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDecalLifetimeOpacity"
    },
    {
        "doc": "Material Expression Decal Mipmap Level\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDecalMipmapLevel.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_height`` (float):  [Read-Write]\r\n- ``const_width`` (float):  [Read-Write] only used if TextureSize is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDecalMipmapLevel"
    },
    {
        "doc": "Material Expression Delta Time\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDeltaTime.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDeltaTime"
    },
    {
        "doc": "Material Expression Depth Fade\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDepthFade.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``fade_distance_default`` (float):  [Read-Write] World space distance over which the fade should take place.  This is used when FadeDistance is unconnected.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``opacity_default`` (float):  [Read-Write] Opacity which will be scaled by the result of the fade.  This is used when InOpacity is unconnected.",
        "name": "MaterialExpressionDepthFade"
    },
    {
        "doc": "Material Expression Depth Of Field Function\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDepthOfFieldFunction.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``function_value`` (DepthOfFieldFunctionValue):  [Read-Write] Determines the mapping place to use on the terrain.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDepthOfFieldFunction"
    },
    {
        "doc": "Material Expression Derive Normal Z\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDeriveNormalZ.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDeriveNormalZ"
    },
    {
        "doc": "Material Expression Desaturation\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDesaturation.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``luminance_factors`` (LinearColor):  [Read-Write]\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDesaturation"
    },
    {
        "doc": "deprecated: 'MaterialExpressionDifference' was renamed to 'MaterialExpressionMaterialXDifference'.",
        "name": "MaterialExpressionDifference"
    },
    {
        "doc": "deprecated: 'MaterialExpressionDisjointOver' was renamed to 'MaterialExpressionMaterialXDisjointOver'.",
        "name": "MaterialExpressionDisjointOver"
    },
    {
        "doc": "Material Expression Distance\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDistance.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDistance"
    },
    {
        "doc": "Material Expression Distance Cull Fade\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDistanceCullFade.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDistanceCullFade"
    },
    {
        "doc": "Material Expression Distance Field Approx AO\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDistanceFieldApproxAO.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``base_distance_default`` (float):  [Read-Write] only used if BaseDistance is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``num_steps`` (uint32):  [Read-Write] Number of samples used to calculate occlusion\r\n- ``radius_default`` (float):  [Read-Write] only used if Radius is not hooked up\r\n- ``step_scale_default`` (float):  [Read-Write] Used to control step distance distribution",
        "name": "MaterialExpressionDistanceFieldApproxAO"
    },
    {
        "doc": "Material Expression Distance Field Gradient\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDistanceFieldGradient.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDistanceFieldGradient"
    },
    {
        "doc": "Material output expression to switch logic according to whether distance fields renderering is supported on this project and feature level.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDistanceFieldsRenderingSwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDistanceFieldsRenderingSwitch"
    },
    {
        "doc": "Material Expression Distance to Nearest Surface\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDistanceToNearestSurface.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDistanceToNearestSurface"
    },
    {
        "doc": "Material Expression Divide\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDivide.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_a`` (float):  [Read-Write] only used if A is not hooked up\r\n- ``const_b`` (float):  [Read-Write] only used if B is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDivide"
    },
    {
        "doc": "deprecated: 'MaterialExpressionDodge' was renamed to 'MaterialExpressionMaterialXDodge'.",
        "name": "MaterialExpressionDodge"
    },
    {
        "doc": "Material Expression Dot Product\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDotProduct.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionDotProduct"
    },
    {
        "doc": "Material Expression Double Vector Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDoubleVectorParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``default_value`` (Vector4d):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write] The name of the parameter\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.",
        "name": "MaterialExpressionDoubleVectorParameter"
    },
    {
        "doc": "Material Expression Dynamic Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionDynamicParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``default_value`` (LinearColor):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``param_names`` (Array[str]):  [Read-Write] The names of the parameters.\r\n  These will show up in Cascade when editing a particle system\r\n  that uses the material it is in...\r\n- ``parameter_index`` (uint32):  [Read-Write] The index of the dynamic parameter for use in tools that allow > 1",
        "name": "MaterialExpressionDynamicParameter"
    },
    {
        "doc": "Material Expression Exec Begin\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionExecBegin.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionExecBegin"
    },
    {
        "doc": "Material Expression Exec End\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionExecEnd.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionExecEnd"
    },
    {
        "doc": "Material Expression Exponential\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionExponential.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionExponential"
    },
    {
        "doc": "Material Expression Exponential 2\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionExponential2.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionExponential2"
    },
    {
        "doc": "Provides access to the EyeAdaptation render target.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionEyeAdaptation.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionEyeAdaptation"
    },
    {
        "doc": "Provides access to the EyeAdaptation render target.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionEyeAdaptationInverse.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionEyeAdaptationInverse"
    },
    {
        "doc": "Material Expression Feature Level Switch\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionFeatureLevelSwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionFeatureLevelSwitch"
    },
    {
        "doc": "Material Expression Floor\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionFloor.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionFloor"
    },
    {
        "doc": "Material Expression Fmod\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionFmod.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionFmod"
    },
    {
        "doc": "Material Expression Font Sample\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionFontSample.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``font`` (Font):  [Read-Write] font resource that will be sampled\r\n- ``font_texture_page`` (int32):  [Read-Write] allow access to the various font pages\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionFontSample"
    },
    {
        "doc": "Material Expression Font Sample Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionFontSampleParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``font`` (Font):  [Read-Write] font resource that will be sampled\r\n- ``font_texture_page`` (int32):  [Read-Write] allow access to the various font pages\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write] name to be referenced when we want to find and set thsi parameter\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list. The lower the number the higher up in the parameter list.",
        "name": "MaterialExpressionFontSampleParameter"
    },
    {
        "doc": "Material Expression for Loop\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionForLoop.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionForLoop"
    },
    {
        "doc": "Material Expression Frac\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionFrac.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionFrac"
    },
    {
        "doc": "deprecated: 'MaterialExpressionFractal3D' was renamed to 'MaterialExpressionMaterialXFractal3D'.",
        "name": "MaterialExpressionFractal3D"
    },
    {
        "doc": "Material Expression Fresnel\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionFresnel.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``base_reflect_fraction`` (float):  [Read-Write] Specifies the fraction of specular reflection when the surfaces is viewed from straight on.\r\n  A value of 1 effectively disables Fresnel.\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``exponent`` (float):  [Read-Write] The exponent to pass into the pow() function\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionFresnel"
    },
    {
        "doc": "Material Expression Function Input\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionFunctionInput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``description`` (str):  [Read-Write] The input's description, which will be used as a tooltip on the connector in function call expressions that use this function.\r\n- ``input_name`` (Name):  [Read-Write] The input's name, which will be drawn on the connector in function call expressions that use this function.\r\n- ``input_type`` (FunctionInputType):  [Read-Write] Type of this input.\r\n  Input code chunks will be cast to this type, and a compiler error will be emitted if the cast fails.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``preview_value`` (Vector4f):  [Read-Write] Value used to preview this input when editing the material function.\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the input is displayed relative to the other inputs.\r\n- ``use_preview_value_as_default`` (bool):  [Read-Write] Whether to use the preview value or texture as the default value for this input.",
        "name": "MaterialExpressionFunctionInput"
    },
    {
        "doc": "Material Expression Function Output\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionFunctionOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``description`` (str):  [Read-Write] The output's description, which will be used as a tooltip on the connector in function call expressions that use this function.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``output_name`` (Name):  [Read-Write] The output's name, which will be drawn on the connector in function call expressions that use this function.\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the output is displayed relative to the other outputs.",
        "name": "MaterialExpressionFunctionOutput"
    },
    {
        "doc": "Material Expression GIReplace\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionGIReplace.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionGIReplace"
    },
    {
        "doc": "Material Expression Generic Constant\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionGenericConstant.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionGenericConstant"
    },
    {
        "doc": "Material Expression Get Local\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionGetLocal.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``local_name`` (Name):  [Read-Write]\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionGetLocal"
    },
    {
        "doc": "Material Expression Get Material Attributes\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionGetMaterialAttributes.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``attribute_get_types`` (Array[Guid]):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionGetMaterialAttributes"
    },
    {
        "doc": "Material Expression Hair Attributes\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionHairAttributes.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``use_tangent_space`` (bool):  [Read-Write] If enabled, this nodes outputs a tangent space tangent, otherwise it outputs a world space tangent.",
        "name": "MaterialExpressionHairAttributes"
    },
    {
        "doc": "Material Expression Hair Color\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionHairColor.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionHairColor"
    },
    {
        "doc": "Material Expression Hsv to Rgb\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionHsvToRgb.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionHsvToRgb"
    },
    {
        "doc": "Material Expression If\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionIf.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_b`` (float):  [Read-Write] only used if B is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``equals_threshold`` (float):  [Read-Write]\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionIf"
    },
    {
        "doc": "Material Expression if Then Else\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionIfThenElse.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionIfThenElse"
    },
    {
        "doc": "deprecated: 'MaterialExpressionIn' was renamed to 'MaterialExpressionMaterialXIn'.",
        "name": "MaterialExpressionIn"
    },
    {
        "doc": "Material Expression Inverse Linear Interpolate\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionInverseLinearInterpolate.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``clamp_result`` (bool):  [Read-Write] Clamp the result to 0 to 1\r\n- ``const_a`` (float):  [Read-Write] only used if A is not hooked up\r\n- ``const_b`` (float):  [Read-Write] only used if B is not hooked up\r\n- ``const_value`` (float):  [Read-Write] only used if Value is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionInverseLinearInterpolate"
    },
    {
        "doc": "Material Expression Is Orthographic\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionIsOrthographic.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionIsOrthographic"
    },
    {
        "doc": "Material Expression Landscape Grass Output\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Landscape\r\n- **File**: MaterialExpressionLandscapeGrassOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``grass_types`` (Array[GrassInput]):  [Read-Write]\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLandscapeGrassOutput"
    },
    {
        "doc": "Material Expression Landscape Layer Blend\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Landscape\r\n- **File**: MaterialExpressionLandscapeLayerBlend.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``layers`` (Array[LayerBlendInput]):  [Read-Write]\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLandscapeLayerBlend"
    },
    {
        "doc": "Material Expression Landscape Layer Coords\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Landscape\r\n- **File**: MaterialExpressionLandscapeLayerCoords.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``custom_uv_type`` (LandscapeCustomizedCoordType):  [Read-Write] Determines the mapping place to use on the terrain.\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``mapping_pan_u`` (float):  [Read-Write] Offset to apply to the mapping along U.\r\n- ``mapping_pan_v`` (float):  [Read-Write] Offset to apply to the mapping along V.\r\n- ``mapping_rotation`` (float):  [Read-Write] Rotation to apply to the mapping.\r\n- ``mapping_scale`` (float):  [Read-Write] Uniform scale to apply to the mapping.\r\n- ``mapping_type`` (TerrainCoordMappingType):  [Read-Write] Determines the mapping place to use on the terrain.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLandscapeLayerCoords"
    },
    {
        "doc": "Material Expression Landscape Layer Sample\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Landscape\r\n- **File**: MaterialExpressionLandscapeLayerSample.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``preview_weight`` (float):  [Read-Write]",
        "name": "MaterialExpressionLandscapeLayerSample"
    },
    {
        "doc": "Material Expression Landscape Layer Switch\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Landscape\r\n- **File**: MaterialExpressionLandscapeLayerSwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``preview_used`` (bool):  [Read-Write]",
        "name": "MaterialExpressionLandscapeLayerSwitch"
    },
    {
        "doc": "Material Expression Landscape Layer Weight\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Landscape\r\n- **File**: MaterialExpressionLandscapeLayerWeight.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_base`` (Vector):  [Read-Write] only used if Base is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``preview_weight`` (float):  [Read-Write]",
        "name": "MaterialExpressionLandscapeLayerWeight"
    },
    {
        "doc": "Custom output node to write out physical material weights.\nThis can be used to generate the dominant physical material for each point on a landscape.\nNote that the use of a material output node to generate this information is optional and when a node of this type is not present we fall back on a CPU path which analyzes landscape layer data.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Landscape\r\n- **File**: MaterialExpressionLandscapePhysicalMaterialOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``inputs`` (Array[PhysicalMaterialInput]):  [Read-Write] Array of physical material inputs.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLandscapePhysicalMaterialOutput"
    },
    {
        "doc": "Material Expression Landscape Visibility Mask\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Landscape\r\n- **File**: MaterialExpressionLandscapeVisibilityMask.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLandscapeVisibilityMask"
    },
    {
        "doc": "Material Expression Length\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionLength.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLength"
    },
    {
        "doc": "Material Expression Less\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionBinaryOp.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_a`` (float):  [Read-Write] only used if A is not hooked up\r\n- ``const_b`` (float):  [Read-Write] only used if B is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLess"
    },
    {
        "doc": "Material Expression Light Vector\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionLightVector.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLightVector"
    },
    {
        "doc": "Material Expression Lightmap UVs\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionLightmapUVs.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLightmapUVs"
    },
    {
        "doc": "Material Expression Lightmass Replace\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionLightmassReplace.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLightmassReplace"
    },
    {
        "doc": "Material Expression Linear Interpolate\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionLinearInterpolate.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_a`` (float):  [Read-Write] only used if A is not hooked up\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``const_b`` (float):  [Read-Write] only used if B is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLinearInterpolate"
    },
    {
        "doc": "Material Expression Logarithm\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionLogarithm.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLogarithm"
    },
    {
        "doc": "Material Expression Logarithm 10\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionLogarithm10.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLogarithm10"
    },
    {
        "doc": "Material Expression Logarithm 2\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionLogarithm2.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionLogarithm2"
    },
    {
        "doc": "deprecated: 'MaterialExpressionLuminance' was renamed to 'MaterialExpressionMaterialXLuminance'.",
        "name": "MaterialExpressionLuminance"
    },
    {
        "doc": "Material Expression Make Material Attributes\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionMakeMaterialAttributes.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMakeMaterialAttributes"
    },
    {
        "doc": "Material Expression Map ARPassthrough Camera UV\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionMapARPassthroughCameraUV.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMapARPassthroughCameraUV"
    },
    {
        "doc": "deprecated: 'MaterialExpressionMask' was renamed to 'MaterialExpressionMaterialXMask'.",
        "name": "MaterialExpressionMask"
    },
    {
        "doc": "Material Expression Material Attribute Layers\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionMaterialAttributeLayers.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``default_layers`` (MaterialLayersFunctions):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialAttributeLayers"
    },
    {
        "doc": "Material Expression Material Function Call\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionMaterialFunctionCall.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``material_function`` (MaterialFunctionInterface):  [Read-Write] The function to call.",
        "name": "MaterialExpressionMaterialFunctionCall"
    },
    {
        "doc": "Material Expression Material Layer Output\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionMaterialLayerOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``description`` (str):  [Read-Write] The output's description, which will be used as a tooltip on the connector in function call expressions that use this function.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``output_name`` (Name):  [Read-Write] The output's name, which will be drawn on the connector in function call expressions that use this function.\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the output is displayed relative to the other outputs.",
        "name": "MaterialExpressionMaterialLayerOutput"
    },
    {
        "doc": "Material Expression Material Proxy Replace\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionMaterialProxyReplace.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialProxyReplace"
    },
    {
        "doc": "A material expression that allows combining 3 channels together to create a vector with more channel than the original\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionAppend3Vector.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXAppend3Vector"
    },
    {
        "doc": "A material expression that allows combining 4 channels together to create a vector with more channel than the original\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionAppend4Vector.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXAppend4Vector"
    },
    {
        "doc": "Blend nodes take two 1-4 channel inputs and apply the same operator to all channels.\nBlend nodes support an optional float input mix , which can be used\nto mix the original B value with the result of the blend operation.\nOperation: 1-(1-B)/A\nResult: Lerp(B, 1-(1-B)/A, Alpha)\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionBurn.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXBurn"
    },
    {
        "doc": "Blend nodes take two 1-4 channel inputs and apply the same operator to all channels.\nBlend nodes support an optional float input mix , which can be used\nto mix the original B value with the result of the blend operation.\nOperation: abs(A - B)\nResult: Lerp(B, abs(A - B), Alpha)\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionDifference.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXDifference"
    },
    {
        "doc": "Merge nodes take two 4-channel (color4) inputs and use the built-in alpha channel(s) to control the\ncompositing of the A and B inputs. \"A\" and \"B\" refer to the non-alpha channels of the A and B inputs respectively,\nand \"a\" and \"b\" refer to the alpha channels of the A and B inputs.\nMerge nodes are only defined for float4 inputs\nMerge nodes support an optional float input Alpha , which can be used to mix the\noriginal B value with the result of the blend operation.\n\nOperation: A + B        if a + b <= 1;\n           A + B(1-a)/b if a + b > 1\nResult: Lerp(B, Op, Alpha)\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionDisjointOver.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXDisjointOver"
    },
    {
        "doc": "Blend nodes take two 1-4 channel inputs and apply the same operator to all channels.\nBlend nodes support an optional float input mix , which can be used\nto mix the original B value with the result of the blend operation.\nOperation: B/(1-A)\nResult: Lerp(B, B/(1-A), Alpha)\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionDodge.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXDodge"
    },
    {
        "doc": "deprecated: 'MaterialExpressionMaterialXExponential' was renamed to 'MaterialExpressionExponential'.",
        "name": "MaterialExpressionMaterialXExponential"
    },
    {
        "doc": "Zero-centered 3D Fractal noise in 1, 2, 3 or 4 channels, created by summing several\noctaves of 3D Perlin noise, increasing the frequency and decreasing the amplitude at each octave.\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionFractal3D.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_amplitude`` (float):  [Read-Write] only used if Amplitude is not hooked up\r\n- ``const_diminish`` (float):  [Read-Write] only used if Diminish is not hooked up\r\n- ``const_lacunarity`` (float):  [Read-Write] only used if Lacunarity is not hooked up\r\n- ``const_octaves`` (int32):  [Read-Write] only used if Octaves is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``levels`` (int32):  [Read-Write] 1 = fast but little detail, .. larger numbers cost more performance\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``output_max`` (float):  [Read-Write]\r\n- ``output_min`` (float):  [Read-Write]\r\n- ``scale`` (float):  [Read-Write] can also be done with a multiply on the Position\r\n- ``turbulence`` (bool):  [Read-Write] How multiple frequencies are getting combined",
        "name": "MaterialExpressionMaterialXFractal3D"
    },
    {
        "doc": "deprecated: 'MaterialExpressionMaterialXHsvToRgb' was renamed to 'MaterialExpressionHsvToRgb'.",
        "name": "MaterialExpressionMaterialXHsvToRgb"
    },
    {
        "doc": "Merge nodes take two 4-channel (color4) inputs and use the built-in alpha channel(s) to control the\ncompositing of the A and B inputs. \"A\" and \"B\" refer to the non-alpha channels of the A and B inputs respectively,\nand \"a\" and \"b\" refer to the alpha channels of the A and B inputs.\nMerge nodes are only defined for float4 inputs\nMerge nodes support an optional float input Alpha , which can be used to mix the\noriginal B value with the result of the blend operation.\n\nOperation: Ab\nResult: Lerp(B, Ab, Alpha)\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionIn.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXIn"
    },
    {
        "doc": "deprecated: 'MaterialExpressionMaterialXLength' was renamed to 'MaterialExpressionLength'.",
        "name": "MaterialExpressionMaterialXLength"
    },
    {
        "doc": "deprecated: 'MaterialExpressionMaterialXLogarithm' was renamed to 'MaterialExpressionLogarithm'.",
        "name": "MaterialExpressionMaterialXLogarithm"
    },
    {
        "doc": "Material Expression Material XLuminance\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionLuminance.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``luminance_factors`` (LinearColor):  [Read-Write]\r\n- ``luminance_mode`` (MaterialXLuminanceMode):  [Read-Write] Color component factors for converting a color to greyscale.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXLuminance"
    },
    {
        "doc": "Merge nodes take two 4-channel (color4) inputs and use the built-in alpha channel(s) to control the\ncompositing of the A and B inputs. \"A\" and \"B\" refer to the non-alpha channels of the A and B inputs respectively,\nand \"a\" and \"b\" refer to the alpha channels of the A and B inputs.\nMerge nodes are only defined for float4 inputs\nMerge nodes support an optional float input Alpha , which can be used to mix the\noriginal B value with the result of the blend operation.\n\nOperation: B*a\nResult: Lerp(B, B*a, Alpha)\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionMask.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXMask"
    },
    {
        "doc": "Merge nodes take two 4-channel (color4) inputs and use the built-in alpha channel(s) to control the\ncompositing of the A and B inputs. \"A\" and \"B\" refer to the non-alpha channels of the A and B inputs respectively,\nand \"a\" and \"b\" refer to the alpha channels of the A and B inputs.\nMerge nodes are only defined for float4 inputs\nMerge nodes support an optional float input Alpha , which can be used to mix the\noriginal B value with the result of the blend operation.\n\nOperation: A*a + B*(1-a)\nResult: Lerp(B, A*a + B*(1-a), Alpha)\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionMatte.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXMatte"
    },
    {
        "doc": "Blend nodes take two 1-4 channel inputs and apply the same operator to all channels.\nBlend nodes support an optional float input mix , which can be used\nto mix the original B value with the result of the blend operation.\nOperation: A - B\nResult: Lerp(B, A - B, Alpha)\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionMinus.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXMinus"
    },
    {
        "doc": "Merge nodes take two 4-channel (color4) inputs and use the built-in alpha channel(s) to control the\ncompositing of the A and B inputs. \"A\" and \"B\" refer to the non-alpha channels of the A and B inputs respectively,\nand \"a\" and \"b\" refer to the alpha channels of the A and B inputs.\nMerge nodes are only defined for float4 inputs\nMerge nodes support an optional float input Alpha , which can be used to mix the\noriginal B value with the result of the blend operation.\n\nOperation: A(1-b)\nResult: Lerp(B, A(1-b), Alpha)\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionOut.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXOut"
    },
    {
        "doc": "Merge nodes take two 4-channel (color4) inputs and use the built-in alpha channel(s) to control the\ncompositing of the A and B inputs. \"A\" and \"B\" refer to the non-alpha channels of the A and B inputs respectively,\nand \"a\" and \"b\" refer to the alpha channels of the A and B inputs.\nMerge nodes are only defined for float4 inputs\nMerge nodes support an optional float input Alpha , which can be used to mix the\noriginal B value with the result of the blend operation.\n\nOperation: A + B(1-a)\nResult: Lerp(B, A + B(1-a), Alpha)\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionOver.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXOver"
    },
    {
        "doc": "Blend nodes take two 1-4 channel inputs and apply the same operator to all channels.\nBlend nodes support an optional float input mix , which can be used\nto mix the original B value with the result of the blend operation.\nOperation: 2*A*B          if A < 0.5;\n           1-(1-A)(1-B) if A >= 0.5\nResult: Lerp(B, Op, Alpha)\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionOverlay.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXOverlay"
    },
    {
        "doc": "Transform incoming UV texture coordinates from one 2D frame of reference to another.\noperationorder (integer enum): the order in which to perform the transform operations.\n\"0\" or \"SRT\" performs -pivot, scale, rotate, translate, +pivot as per the original\nimplementation matching the behavior of certain DCC packages, and \"1\" or \"TRS\" performs\n-pivot, translate, rotate, scale, +pivot which does not introduce texture shear.\nDefault is 0 \"SRT\" for backward compatibility.\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionPlace2D.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_rotation_angle`` (float):  [Read-Write] only used if RotationAngle is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXPlace2D"
    },
    {
        "doc": "Blend nodes take two 1-4 channel inputs and apply the same operator to all channels.\nBlend nodes support an optional float input mix , which can be used\nto mix the original B value with the result of the blend operation.\nOperation: A + B\nResult: Lerp(B, A + B, Alpha)\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionPlus.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXPlus"
    },
    {
        "doc": "Multiply the RGB channels of the input by the Alpha channel of the input.\nInput must be of type float4\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionPremult.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXPremult"
    },
    {
        "doc": "A material expression that computes a 4-corner bilinear value ramp..\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionRamp4.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXRamp4"
    },
    {
        "doc": "A material expression that computes a left-to-right bilinear value ramp.\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionRampLeftRight.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXRampLeftRight"
    },
    {
        "doc": "A material expression that computes a top-to-bottom bilinear value ramp.\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionRampTopBottom.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXRampTopBottom"
    },
    {
        "doc": "A material expression that Remap a value from one range to another.\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionRemap.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``input_high_default`` (float):  [Read-Write]\r\n- ``input_low_default`` (float):  [Read-Write]\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``target_high_default`` (float):  [Read-Write]\r\n- ``target_low_default`` (float):  [Read-Write]",
        "name": "MaterialExpressionMaterialXRemap"
    },
    {
        "doc": "deprecated: 'MaterialExpressionMaterialXRgbToHsv' was renamed to 'MaterialExpressionRgbToHsv'.",
        "name": "MaterialExpressionMaterialXRgbToHsv"
    },
    {
        "doc": "A material expression that rotates a vector2 value about the origin in 2D.\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionRotate2D.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_rotation_angle`` (float):  [Read-Write] only used if RotationAngle is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXRotate2D"
    },
    {
        "doc": "Blend nodes take two 1-4 channel inputs and apply the same operator to all channels.\nBlend nodes support an optional float input mix , which can be used\nto mix the original B value with the result of the blend operation.\nOperation: 1-(1-A)(1-B)\nResult: Lerp(B, 1-(1-F)(1-B), Alpha)\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionScreen.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_alpha`` (float):  [Read-Write] only used if Alpha is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXScreen"
    },
    {
        "doc": "A material expression that computes a left-right split matte, split at a specified u value.\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionSplitLeftRight.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_center`` (float):  [Read-Write] only used if A is not hooked up\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXSplitLeftRight"
    },
    {
        "doc": "A material expression that computes a top-bottom split matte, split at a specified v value.\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionSplitTopBottom.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_center`` (float):  [Read-Write] only used if A is not hooked up\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXSplitTopBottom"
    },
    {
        "doc": "Material Expression Material XSwizzle\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionSwizzle.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``channels`` (str):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXSwizzle"
    },
    {
        "doc": "Material Expression Material XTexture Sample Parameter Blur\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionTextureSampleParameterBlur.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``automatic_view_mip_bias`` (bool):  [Read-Write] Whether the texture should be sampled with per view mip biasing for sharper output with Temporal AA.\r\n- ``channel_names`` (ParameterChannelNames):  [Read-Write]\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_mip_value`` (int32):  [Read-Write] only used if MipValue is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``filter`` (MaterialXTextureSampleBlurFilter):  [Read-Write] Filter to use when we blur a Texture: Gaussian or Box Linear filter\r\n- ``filter_offset`` (float):  [Read-Write] Offset of the filter when we sample a texture coordinate\r\n- ``filter_size`` (float):  [Read-Write] Size of the filter when we sample a texture coordinate\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``kernel_size`` (MAterialXTextureSampleBlurKernel):  [Read-Write] The size of the blur kernel, relative to 0-1 UV space.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``mip_value_mode`` (TextureMipValueMode):  [Read-Write] Defines how the MipValue property is applied to the texture lookup\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the UTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionMaterialXTextureSampleParameterBlur"
    },
    {
        "doc": "Divide the RGB channels of the input by the Alpha channel of the input. If the\nAlpha value is zero, the original color4 input value is passed through unchanged.\nInput must be of type float4\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Interchange\r\n- **Module**: InterchangeImport\r\n- **File**: MaterialExpressionUnpremult.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMaterialXUnpremult"
    },
    {
        "doc": "deprecated: 'MaterialExpressionMatte' was renamed to 'MaterialExpressionMaterialXMatte'.",
        "name": "MaterialExpressionMatte"
    },
    {
        "doc": "Material Expression Max\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionMax.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_a`` (float):  [Read-Write] only used if A is not hooked up\r\n- ``const_b`` (float):  [Read-Write] only used if B is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMax"
    },
    {
        "doc": "Material Expression Min\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionMin.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_a`` (float):  [Read-Write] only used if A is not hooked up\r\n- ``const_b`` (float):  [Read-Write] only used if B is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMin"
    },
    {
        "doc": "deprecated: 'MaterialExpressionMinus' was renamed to 'MaterialExpressionMaterialXMinus'.",
        "name": "MaterialExpressionMinus"
    },
    {
        "doc": "Material Expression Multiply\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionMultiply.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_a`` (float):  [Read-Write] only used if A is not hooked up\r\n- ``const_b`` (float):  [Read-Write] only used if B is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionMultiply"
    },
    {
        "doc": "Material Expression Named Reroute Base\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionNamedReroute.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionNamedRerouteBase"
    },
    {
        "doc": "Material Expression Named Reroute Declaration\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionNamedReroute.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``name`` (Name):  [Read-Write]\r\n- ``node_color`` (LinearColor):  [Read-Write] The color of the graph node. The same color will apply to all linked usages of this Declaration node",
        "name": "MaterialExpressionNamedRerouteDeclaration"
    },
    {
        "doc": "Material Expression Named Reroute Usage\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionNamedReroute.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionNamedRerouteUsage"
    },
    {
        "doc": "Material Expression Nanite Replace\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionNaniteReplace.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionNaniteReplace"
    },
    {
        "doc": "Material Expression Noise\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionNoise.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``level_scale`` (float):  [Read-Write] usually 2 but higher values allow efficient use of few levels\r\n- ``levels`` (int32):  [Read-Write] 1 = fast but little detail, .. larger numbers cost more performance\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``noise_function`` (NoiseFunction):  [Read-Write] Noise function, affects performance and look\r\n- ``output_max`` (float):  [Read-Write]\r\n- ``output_min`` (float):  [Read-Write]\r\n- ``quality`` (int32):  [Read-Write] Lower numbers are faster and lower quality, higher numbers are slower and higher quality\r\n- ``repeat_size`` (uint32):  [Read-Write] How many units in each tile (if Tiling is on)\r\n- ``scale`` (float):  [Read-Write] can also be done with a multiply on the Position\r\n- ``tiling`` (bool):  [Read-Write] Whether to use tiling noise pattern, useful for baking to seam-free repeating textures\r\n- ``turbulence`` (bool):  [Read-Write] How multiple frequencies are getting combined",
        "name": "MaterialExpressionNoise"
    },
    {
        "doc": "Material Expression Normalize\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionNormalize.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionNormalize"
    },
    {
        "doc": "Material Expression Object Bounds\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionObjectBounds.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionObjectBounds"
    },
    {
        "doc": "Material Expression Object Local Bounds\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionObjectLocalBounds.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionObjectLocalBounds"
    },
    {
        "doc": "Material Expression Object Orientation\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionObjectOrientation.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionObjectOrientation"
    },
    {
        "doc": "Material Expression Object Position WS\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionObjectPositionWS.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``origin_type`` (PositionOrigin):  [Read-Write]",
        "name": "MaterialExpressionObjectPositionWS"
    },
    {
        "doc": "Material Expression Object Radius\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionObjectRadius.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionObjectRadius"
    },
    {
        "doc": "Material Expression One Minus\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionOneMinus.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionOneMinus"
    },
    {
        "doc": "deprecated: 'MaterialExpressionOut' was renamed to 'MaterialExpressionMaterialXOut'.",
        "name": "MaterialExpressionOut"
    },
    {
        "doc": "deprecated: 'MaterialExpressionOver' was renamed to 'MaterialExpressionMaterialXOver'.",
        "name": "MaterialExpressionOver"
    },
    {
        "doc": "deprecated: 'MaterialExpressionOverlay' was renamed to 'MaterialExpressionMaterialXOverlay'.",
        "name": "MaterialExpressionOverlay"
    },
    {
        "doc": "Material Expression Panner\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPanner.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_coordinate`` (uint32):  [Read-Write] only used if Coordinate is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``fractional_part`` (bool):  [Read-Write] Output only the fractional part of the pan calculation for greater precision.\r\n  Output is greater than or equal to 0 and less than 1.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``speed_x`` (float):  [Read-Write]\r\n- ``speed_y`` (float):  [Read-Write]",
        "name": "MaterialExpressionPanner"
    },
    {
        "doc": "Material Expression Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write] The name of the parameter\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.",
        "name": "MaterialExpressionParameter"
    },
    {
        "doc": "Material Expression Particle Color\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParticleColor.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionParticleColor"
    },
    {
        "doc": "Material Expression Particle Direction\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParticleDirection.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionParticleDirection"
    },
    {
        "doc": "Material Expression Particle Macro UV\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParticleMacroUV.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionParticleMacroUV"
    },
    {
        "doc": "Material Expression Particle Motion Blur Fade\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParticleMotionBlurFade.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionParticleMotionBlurFade"
    },
    {
        "doc": "Material Expression Particle Position WS\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParticlePositionWS.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``origin_type`` (PositionOrigin):  [Read-Write]",
        "name": "MaterialExpressionParticlePositionWS"
    },
    {
        "doc": "Material Expression Particle Radius\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParticleRadius.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionParticleRadius"
    },
    {
        "doc": "Material Expression Particle Random\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParticleRandom.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionParticleRandom"
    },
    {
        "doc": "Material Expression Particle Relative Time\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParticleRelativeTime.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionParticleRelativeTime"
    },
    {
        "doc": "Material Expression Particle Size\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParticleSize.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionParticleSize"
    },
    {
        "doc": "Material Expression Particle Speed\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParticleSpeed.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionParticleSpeed"
    },
    {
        "doc": "Material Expression Particle Sprite Rotation\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParticleSpriteRotation.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionParticleSpriteRotation"
    },
    {
        "doc": "Material Expression Particle Sub UV\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParticleSubUV.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``automatic_view_mip_bias`` (bool):  [Read-Write] Whether the texture should be sampled with per view mip biasing for sharper output with Temporal AA.\r\n- ``blend`` (bool):  [Read-Write]\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_mip_value`` (int32):  [Read-Write] only used if MipValue is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``mip_value_mode`` (TextureMipValueMode):  [Read-Write] Defines how the MipValue property is applied to the texture lookup\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the UTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionParticleSubUV"
    },
    {
        "doc": "Material Expression Particle Sub UVProperties\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionParticleSubUVProperties.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionParticleSubUVProperties"
    },
    {
        "doc": "Path tracing buffer is only accessable in postprocess material.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPathTracingBufferTexture.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``path_tracing_buffer_texture_id`` (PathTracingBufferTextureId):  [Read-Write] Which path tracing buffer texture we want to make a lookup into.",
        "name": "MaterialExpressionPathTracingBufferTexture"
    },
    {
        "doc": "Material Expression Path Tracing Quality Switch\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPathTracingQualitySwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPathTracingQualitySwitch"
    },
    {
        "doc": "Material Expression Path Tracing Ray Type Switch\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPathTracingRayTypeSwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPathTracingRayTypeSwitch"
    },
    {
        "doc": "Material Expression Per Instance Custom Data\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPerInstanceCustomData.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_default_value`` (float):  [Read-Write]\r\n- ``data_index`` (uint32):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPerInstanceCustomData"
    },
    {
        "doc": "Material Expression Per Instance Custom Data 3Vector\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPerInstanceCustomData.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_default_value`` (LinearColor):  [Read-Write]\r\n- ``data_index`` (uint32):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPerInstanceCustomData3Vector"
    },
    {
        "doc": "Material Expression Per Instance Fade Amount\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPerInstanceFadeAmount.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPerInstanceFadeAmount"
    },
    {
        "doc": "Material Expression Per Instance Random\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPerInstanceRandom.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPerInstanceRandom"
    },
    {
        "doc": "Material Expression Pin Base\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPinBase.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``reroute_pins`` (Array[CompositeReroute]):  [Read-Write] Underlying reroute pins used to compile material. Must call Modify after editing to update output expressions.",
        "name": "MaterialExpressionPinBase"
    },
    {
        "doc": "Material Expression Pixel Depth\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPixelDepth.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPixelDepth"
    },
    {
        "doc": "Material Expression Pixel Normal WS\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPixelNormalWS.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPixelNormalWS"
    },
    {
        "doc": "deprecated: 'MaterialExpressionPlace2D' was renamed to 'MaterialExpressionMaterialXPlace2D'.",
        "name": "MaterialExpressionPlace2D"
    },
    {
        "doc": "deprecated: 'MaterialExpressionPlus' was renamed to 'MaterialExpressionMaterialXPlus'.",
        "name": "MaterialExpressionPlus"
    },
    {
        "doc": "Material Expression Power\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPower.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_exponent`` (float):  [Read-Write] only used if Exponent is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPower"
    },
    {
        "doc": "Material Expression Pre Skinned Local Bounds\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPreSkinnedLocalBounds.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPreSkinnedLocalBounds"
    },
    {
        "doc": "Material Expression Pre Skinned Normal\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPreSkinnedNormal.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPreSkinnedNormal"
    },
    {
        "doc": "Material Expression Pre Skinned Position\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPreSkinnedPosition.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPreSkinnedPosition"
    },
    {
        "doc": "Material Expression Precomputed AOMask\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPrecomputedAOMask.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPrecomputedAOMask"
    },
    {
        "doc": "deprecated: 'MaterialExpressionPremult' was renamed to 'MaterialExpressionMaterialXPremult'.",
        "name": "MaterialExpressionPremult"
    },
    {
        "doc": "Material Expression Previous Frame Switch\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionPreviousFrameSwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionPreviousFrameSwitch"
    },
    {
        "doc": "Material Expression Quality Switch\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionQualitySwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionQualitySwitch"
    },
    {
        "doc": "deprecated: 'MaterialExpressionRamp4' was renamed to 'MaterialExpressionMaterialXRamp4'.",
        "name": "MaterialExpressionRamp4"
    },
    {
        "doc": "deprecated: 'MaterialExpressionRampLeftRight' was renamed to 'MaterialExpressionMaterialXRampLeftRight'.",
        "name": "MaterialExpressionRampLeftRight"
    },
    {
        "doc": "deprecated: 'MaterialExpressionRampTopBottom' was renamed to 'MaterialExpressionMaterialXRampTopBottom'.",
        "name": "MaterialExpressionRampTopBottom"
    },
    {
        "doc": "Material Expression Ray Tracing Quality Switch\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionRayTracingQualitySwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionRayTracingQualitySwitch"
    },
    {
        "doc": "Material Expression Reflection Capture Pass Switch\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionReflectionCapturePassSwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionReflectionCapturePassSwitch"
    },
    {
        "doc": "Material Expression Reflection Vector WS\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionReflectionVectorWS.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``normalize_custom_world_normal`` (bool):  [Read-Write] (true): The specified world normal will be normalized. (false): WorldNormal will just be used as is, faster but possible artifacts if normal length isn't 1",
        "name": "MaterialExpressionReflectionVectorWS"
    },
    {
        "doc": "deprecated: 'MaterialExpressionRemap' was renamed to 'MaterialExpressionMaterialXRemap'.",
        "name": "MaterialExpressionRemap"
    },
    {
        "doc": "Material Expression Reroute\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionReroute.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionReroute"
    },
    {
        "doc": "Material Expression Reroute Base\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionRerouteBase.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionRerouteBase"
    },
    {
        "doc": "Material Expression Rgb to Hsv\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionRgbToHsv.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionRgbToHsv"
    },
    {
        "doc": "deprecated: 'MaterialExpressionRotate2D' was renamed to 'MaterialExpressionMaterialXRotate2D'.",
        "name": "MaterialExpressionRotate2D"
    },
    {
        "doc": "Material Expression Rotate About Axis\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionRotateAboutAxis.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``period`` (float):  [Read-Write]",
        "name": "MaterialExpressionRotateAboutAxis"
    },
    {
        "doc": "Material Expression Rotator\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionRotator.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``center_x`` (float):  [Read-Write]\r\n- ``center_y`` (float):  [Read-Write]\r\n- ``const_coordinate`` (uint32):  [Read-Write] only used if Coordinate is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``speed`` (float):  [Read-Write]",
        "name": "MaterialExpressionRotator"
    },
    {
        "doc": "Material Expression Round\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionRound.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionRound"
    },
    {
        "doc": "Material output expression for writing to a runtime virtual texture.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionRuntimeVirtualTextureOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionRuntimeVirtualTextureOutput"
    },
    {
        "doc": "Material output expression to switch logic for a path that renders to runtime virtual texture pages.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionRuntimeVirtualTextureReplace.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionRuntimeVirtualTextureReplace"
    },
    {
        "doc": "Material expression for sampling from a runtime virtual texture.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionRuntimeVirtualTextureSample.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``adaptive`` (bool):  [Read-Write] Enable sparse adaptive page tables. Note that the bound Virtual Texture should have valid adaptive virtual texture settings for sampling to work correctly.\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``enable_feedback`` (bool):  [Read-Write] Enable virtual texture feedback.\r\n  Disabling this can result in the virtual texture not reaching the correct mip level.\r\n  It should only be used in cases where we don't care about the correct mip level being resident, or some other process is maintaining the correct level.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``material_type`` (RuntimeVirtualTextureMaterialType):  [Read-Write] How to interpret the virtual texture contents. Note that the bound Virtual Texture should have the same setting for sampling to work correctly.\r\n- ``mip_value_mode`` (RuntimeVirtualTextureMipValueMode):  [Read-Write] Defines how the mip level is calculated for the virtual texture lookup.\r\n- ``single_physical_space`` (bool):  [Read-Write] Enable page table channel packing. Note that the bound Virtual Texture should have the same setting for sampling to work correctly.\r\n- ``texture_address_mode`` (RuntimeVirtualTextureTextureAddressMode):  [Read-Write] Defines the texture addressing mode.\r\n- ``virtual_texture`` (RuntimeVirtualTexture):  [Read-Write] The virtual texture object to sample.",
        "name": "MaterialExpressionRuntimeVirtualTextureSample"
    },
    {
        "doc": "Material Expression Runtime Virtual Texture Sample Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionRuntimeVirtualTextureSampleParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``adaptive`` (bool):  [Read-Write] Enable sparse adaptive page tables. Note that the bound Virtual Texture should have valid adaptive virtual texture settings for sampling to work correctly.\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``enable_feedback`` (bool):  [Read-Write] Enable virtual texture feedback.\r\n  Disabling this can result in the virtual texture not reaching the correct mip level.\r\n  It should only be used in cases where we don't care about the correct mip level being resident, or some other process is maintaining the correct level.\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``material_type`` (RuntimeVirtualTextureMaterialType):  [Read-Write] How to interpret the virtual texture contents. Note that the bound Virtual Texture should have the same setting for sampling to work correctly.\r\n- ``mip_value_mode`` (RuntimeVirtualTextureMipValueMode):  [Read-Write] Defines how the mip level is calculated for the virtual texture lookup.\r\n- ``parameter_name`` (Name):  [Read-Write] Name to be referenced when we want to find and set this parameter\r\n- ``single_physical_space`` (bool):  [Read-Write] Enable page table channel packing. Note that the bound Virtual Texture should have the same setting for sampling to work correctly.\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list. The lower the number the higher up in the parameter list.\r\n- ``texture_address_mode`` (RuntimeVirtualTextureTextureAddressMode):  [Read-Write] Defines the texture addressing mode.\r\n- ``virtual_texture`` (RuntimeVirtualTexture):  [Read-Write] The virtual texture object to sample.",
        "name": "MaterialExpressionRuntimeVirtualTextureSampleParameter"
    },
    {
        "doc": "Material Expression Sample Physics Integer Field\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSamplePhysicsField.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``field_target`` (FieldIntegerType):  [Read-Write] Target Type to be accessed\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSamplePhysicsIntegerField"
    },
    {
        "doc": "Material Expression Sample Physics Scalar Field\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSamplePhysicsField.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``field_target`` (FieldScalarType):  [Read-Write] Target Type to be accessed\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSamplePhysicsScalarField"
    },
    {
        "doc": "Material expresions to sample the global field\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSamplePhysicsField.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``field_target`` (FieldVectorType):  [Read-Write] Target Type to be accessed\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSamplePhysicsVectorField"
    },
    {
        "doc": "Material Expression Saturate\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSaturate.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSaturate"
    },
    {
        "doc": "Material Expression Scalar Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionScalarParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``default_value`` (float):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write] The name of the parameter\r\n- ``primitive_data_index`` (uint8):  [Read-Write]\r\n- ``slider_max`` (float):  [Read-Write] Sets the upper bound for the slider on this parameter in the material instance editor.\r\n  The slider will be disabled if SliderMax <= SliderMin.\r\n- ``slider_min`` (float):  [Read-Write] Sets the lower bound for the slider on this parameter in the material instance editor.\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``use_custom_primitive_data`` (bool):  [Read-Write]",
        "name": "MaterialExpressionScalarParameter"
    },
    {
        "doc": "Material Expression Scene Color\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSceneColor.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_input`` (Vector2D):  [Read-Write] only used if Input is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``input_mode`` (MaterialSceneAttributeInputMode):  [Read-Write] Coordinates - UV coordinates to apply to the scene color lookup.\r\n  OffsetFraction -      An offset to apply to the scene color lookup in a 2d fraction of the screen.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSceneColor"
    },
    {
        "doc": "Material Expression Scene Depth\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSceneDepth.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_input`` (Vector2D):  [Read-Write] only used if Input is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``input_mode`` (MaterialSceneAttributeInputMode):  [Read-Write] Coordinates - UV coordinates to apply to the scene depth lookup.\r\n  OffsetFraction - An offset to apply to the scene depth lookup in a 2d fraction of the screen.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSceneDepth"
    },
    {
        "doc": "Material Expression Scene Depth Without Water\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSceneDepthWithoutWater.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_input`` (Vector2D):  [Read-Write] only used if Input is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``fallback_depth`` (float):  [Read-Write] Depth to fall back to in case the needed texture isn't available on a particular platform or configuration\r\n- ``input_mode`` (MaterialSceneAttributeInputMode):  [Read-Write] Coordinates - UV coordinates to apply to the scene depth lookup.\r\n  OffsetFraction - An offset to apply to the scene depth lookup in a 2d fraction of the screen.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSceneDepthWithoutWater"
    },
    {
        "doc": "Material Expression Scene Texel Size\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSceneTexelSize.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSceneTexelSize"
    },
    {
        "doc": "Material Expression Scene Texture\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSceneTexture.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``filtered`` (bool):  [Read-Write] Whether to use point sampled texture lookup (default) or using [bi-linear] filtered (can be slower, avoid faceted lock with distortions), some SceneTextures cannot be filtered\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``scene_texture_id`` (SceneTextureId):  [Read-Write] Which scene texture (screen aligned texture) we want to make a lookup into",
        "name": "MaterialExpressionSceneTexture"
    },
    {
        "doc": "deprecated: 'MaterialExpressionScreen' was renamed to 'MaterialExpressionMaterialXScreen'.",
        "name": "MaterialExpressionScreen"
    },
    {
        "doc": "Material Expression Screen Position\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionScreenPosition.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionScreenPosition"
    },
    {
        "doc": "Material Expression Set Local\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSetLocal.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``local_name`` (Name):  [Read-Write]\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSetLocal"
    },
    {
        "doc": "Material Expression Set Material Attributes\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSetMaterialAttributes.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``attribute_set_types`` (Array[Guid]):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSetMaterialAttributes"
    },
    {
        "doc": "Material Expression Shader Stage Switch\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionShaderStageSwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionShaderStageSwitch"
    },
    {
        "doc": "Material Expression Shading Model\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionShadingModel.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``shading_model`` (MaterialShadingModel):  [Read-Write]",
        "name": "MaterialExpressionShadingModel"
    },
    {
        "doc": "Material Expression Shading Path Switch\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionShadingPathSwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionShadingPathSwitch"
    },
    {
        "doc": "Material Expression Shadow Replace\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionShadowReplace.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionShadowReplace"
    },
    {
        "doc": "Material Expression Sign\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSign.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSign"
    },
    {
        "doc": "Material Expression Sine\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSine.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``period`` (float):  [Read-Write]",
        "name": "MaterialExpressionSine"
    },
    {
        "doc": "Material output expression for writing single layer water volume material properties.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSingleLayerWaterMaterialOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSingleLayerWaterMaterialOutput"
    },
    {
        "doc": "Material Expression Sky Atmosphere Aerial Perspective\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSkyAtmosphereLightIlluminance.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSkyAtmosphereAerialPerspective"
    },
    {
        "doc": "Material Expression Sky Atmosphere Distant Light Scattered Luminance\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSkyAtmosphereLightIlluminance.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance"
    },
    {
        "doc": "Material Expression Sky Atmosphere Light Direction\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSkyAtmosphereLightDirection.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``light_index`` (int32):  [Read-Write] Index of the atmosphere light to sample.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSkyAtmosphereLightDirection"
    },
    {
        "doc": "Material Expression Sky Atmosphere Light Disk Luminance\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSkyAtmosphereLightIlluminance.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``light_index`` (int32):  [Read-Write] Index of the atmosphere light to sample.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSkyAtmosphereLightDiskLuminance"
    },
    {
        "doc": "Material Expression Sky Atmosphere Light Illuminance\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSkyAtmosphereLightIlluminance.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``light_index`` (int32):  [Read-Write] Index of the atmosphere light to sample.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSkyAtmosphereLightIlluminance"
    },
    {
        "doc": "Material Expression Sky Atmosphere View Luminance\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSkyAtmosphereViewLuminance.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSkyAtmosphereViewLuminance"
    },
    {
        "doc": "Material Expression Sky Light Env Map Sample\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSkyLightEnvMapSample.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSkyLightEnvMapSample"
    },
    {
        "doc": "Material Expression Smooth Step\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSmoothStep.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_max`` (float):  [Read-Write] only used if Max is not hooked up\r\n- ``const_min`` (float):  [Read-Write] only used if Min is not hooked up\r\n- ``const_value`` (float):  [Read-Write] only used if Value is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSmoothStep"
    },
    {
        "doc": "Material Expression Sobol\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSobol.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_index`` (uint32):  [Read-Write] Sobol point number. Only used if Index is not connected.\r\n- ``const_seed`` (Vector2D):  [Read-Write] 2D Seed for sequence randomization. Only used if Seed is not connected.\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSobol"
    },
    {
        "doc": "Material Expression Sparse Volume Texture Base\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSparseVolumeTextureBase.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``sparse_volume_texture`` (SparseVolumeTexture):  [Read-Write] The Sparse Virtual Texture to sample.",
        "name": "MaterialExpressionSparseVolumeTextureBase"
    },
    {
        "doc": "Material Expression Sparse Volume Texture Object\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSparseVolumeTextureObject.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``sparse_volume_texture`` (SparseVolumeTexture):  [Read-Write] The Sparse Virtual Texture to sample.",
        "name": "MaterialExpressionSparseVolumeTextureObject"
    },
    {
        "doc": "Material Expression Sparse Volume Texture Object Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSparseVolumeTextureObject.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write] Name to be referenced when we want to find and set this parameter\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the USparseVolumeTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list. The lower the number the higher up in the parameter list.\r\n- ``sparse_volume_texture`` (SparseVolumeTexture):  [Read-Write] The Sparse Virtual Texture to sample.",
        "name": "MaterialExpressionSparseVolumeTextureObjectParameter"
    },
    {
        "doc": "Material expression for sampling from a runtime virtual texture.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSparseVolumeTextureSample.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the USparseVolumeTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sparse_volume_texture`` (SparseVolumeTexture):  [Read-Write] The Sparse Virtual Texture to sample.",
        "name": "MaterialExpressionSparseVolumeTextureSample"
    },
    {
        "doc": "Material Expression Sparse Volume Texture Sample Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSparseVolumeTextureSample.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write] Name to be referenced when we want to find and set this parameter\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the USparseVolumeTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list. The lower the number the higher up in the parameter list.\r\n- ``sparse_volume_texture`` (SparseVolumeTexture):  [Read-Write] The Sparse Virtual Texture to sample.",
        "name": "MaterialExpressionSparseVolumeTextureSampleParameter"
    },
    {
        "doc": "Material Expression Speed Tree\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSpeedTree.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``accurate_wind_velocities`` (bool):  [Read-Write] Support accurate velocities from wind. This will incur extra cost per vertex.\r\n- ``billboard_threshold`` (float):  [Read-Write] The threshold for triangles to be removed from the bilboard mesh when not facing the camera (0 = none pass, 1 = all pass).\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``geometry_type`` (SpeedTreeGeometryType):  [Read-Write] The type of SpeedTree geometry on which this material will be used\r\n- ``lod_type`` (SpeedTreeLODType):  [Read-Write] The type of LOD to use\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``wind_type`` (SpeedTreeWindType):  [Read-Write] The type of wind effect used on this tree. This can only go as high as it was in the SpeedTree Modeler, but you can set it to a lower option for lower quality wind and faster rendering.",
        "name": "MaterialExpressionSpeedTree"
    },
    {
        "doc": "Material Expression Sphere Mask\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSphereMask.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``attenuation_radius`` (float):  [Read-Write] in the unit that A and B are measured\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``hardness_percent`` (float):  [Read-Write] in percent 0%=soft .. 100%=hard\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSphereMask"
    },
    {
        "doc": "Material Expression Spherical Particle Opacity\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSphericalParticleOpacity.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``constant_density`` (float):  [Read-Write] Constant density of the particle sphere.  Will be overridden if Density is connected.\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSphericalParticleOpacity"
    },
    {
        "doc": "deprecated: 'MaterialExpressionSplitLeftRight' was renamed to 'MaterialExpressionMaterialXSplitLeftRight'.",
        "name": "MaterialExpressionSplitLeftRight"
    },
    {
        "doc": "deprecated: 'MaterialExpressionSplitTopBottom' was renamed to 'MaterialExpressionMaterialXSplitTopBottom'.",
        "name": "MaterialExpressionSplitTopBottom"
    },
    {
        "doc": "This is a texture sampler 2D with a special automatically defined parameter name. The texture specified here will be replaced by the SourceTexture or an AdditionalSourceTextures entry of a Paper2D sprite if this material is used on a sprite.\r\n\r\n**C++ Source:**\r\n\r\n- **Plugin**: Paper2D\r\n- **Module**: Paper2D\r\n- **File**: MaterialExpressionSpriteTextureSampler.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``additional_slot_index`` (int32):  [Read-Write] This is the slot index into the AdditionalSourceTextures array\r\n- ``automatic_view_mip_bias`` (bool):  [Read-Write] Whether the texture should be sampled with per view mip biasing for sharper output with Temporal AA.\r\n- ``channel_names`` (ParameterChannelNames):  [Read-Write]\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_mip_value`` (int32):  [Read-Write] only used if MipValue is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``mip_value_mode`` (TextureMipValueMode):  [Read-Write] Defines how the MipValue property is applied to the texture lookup\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``sample_additional_textures`` (bool):  [Read-Write] Is this a sampler for the default SourceTexture or the AdditionalSourceTextures list?\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the UTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``slot_display_name`` (Text):  [Read-Write] Friendly label for the texture slot, displayed in the Sprite Editor if not empty\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionSpriteTextureSampler"
    },
    {
        "doc": "Material Expression Square Root\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSquareRoot.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSquareRoot"
    },
    {
        "doc": "Material Expression Static Bool\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStaticBool.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``value`` (bool):  [Read-Write]",
        "name": "MaterialExpressionStaticBool"
    },
    {
        "doc": "Material Expression Static Bool Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStaticBoolParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``default_value`` (bool):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``dynamic_branch`` (bool):  [Read-Write] Change Parameter from \"static bool\" to (dynamic) bool type which enables it to be used with dynamic branching\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write] The name of the parameter\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.",
        "name": "MaterialExpressionStaticBoolParameter"
    },
    {
        "doc": "Material Expression Static Component Mask Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStaticComponentMaskParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``default_a`` (bool):  [Read-Write]\r\n- ``default_b`` (bool):  [Read-Write]\r\n- ``default_g`` (bool):  [Read-Write]\r\n- ``default_r`` (bool):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write] The name of the parameter\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.",
        "name": "MaterialExpressionStaticComponentMaskParameter"
    },
    {
        "doc": "Material Expression Static Switch\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStaticSwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``default_value`` (bool):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStaticSwitch"
    },
    {
        "doc": "Material Expression Static Switch Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStaticSwitchParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``default_value`` (bool):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``dynamic_branch`` (bool):  [Read-Write] Change Parameter from \"static bool\" to (dynamic) bool type which enables it to be used with dynamic branching\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write] The name of the parameter\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.",
        "name": "MaterialExpressionStaticSwitchParameter"
    },
    {
        "doc": "Material Expression Step\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStep.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_x`` (float):  [Read-Write] only used if X is not hooked up\r\n- ``const_y`` (float):  [Read-Write] only used if Y is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStep"
    },
    {
        "doc": "Material Expression Strata Add\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``use_parameter_blending`` (bool):  [Read-Write] Merge A and B into a single material by mixing their inputs rather than their evaluation. This makes lighting evaluation cheaper (Default: off)",
        "name": "MaterialExpressionStrataAdd"
    },
    {
        "doc": "UMaterialExpressionStrataBSDF can only be used for Substrate nodes ouputing StrataData that would need a preview,\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataBSDF"
    },
    {
        "doc": "Material Expression Strata Convert to Decal\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataConvertToDecal"
    },
    {
        "doc": "Material Expression Strata Eye BSDF\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``subsurface_profile`` (SubsurfaceProfile):  [Read-Write] SubsurfaceProfile, for Subsurface Scattering diffusion.",
        "name": "MaterialExpressionStrataEyeBSDF"
    },
    {
        "doc": "Material Expression Strata Hair BSDF\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataHairBSDF"
    },
    {
        "doc": "Material Expression Strata Haziness to Secondary Roughness\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataHazinessToSecondaryRoughness"
    },
    {
        "doc": "/\n Operator nodes\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``use_parameter_blending`` (bool):  [Read-Write] Merge Background and Foreground into a single material by mixing their inputs rather than their evaluation. This makes lighting evaluation cheaper (Default: off)",
        "name": "MaterialExpressionStrataHorizontalMixing"
    },
    {
        "doc": "Material Expression Strata Legacy Conversion\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``subsurface_profile`` (SubsurfaceProfile):  [Read-Write] SubsurfaceProfile, for Screen Space Subsurface Scattering. The profile needs to be set up on both the Substrate diffuse node, and the material node at the moment.",
        "name": "MaterialExpressionStrataLegacyConversion"
    },
    {
        "doc": "Material Expression Strata Light Function\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataLightFunction"
    },
    {
        "doc": "Material Expression Strata Metalness to Diffuse Albedo F0\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataMetalnessToDiffuseAlbedoF0"
    },
    {
        "doc": "Material Expression Strata Post Process\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataPostProcess"
    },
    {
        "doc": "Material Expression Strata Simple Clear Coat BSDF\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataSimpleClearCoatBSDF"
    },
    {
        "doc": "Material Expression Strata Single Layer Water BSDF\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataSingleLayerWaterBSDF"
    },
    {
        "doc": "Material Expression Strata Slab BSDF\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``specular_profile`` (SpecularProfile):  [Read-Write] SpecularProfile, for modulating specular appearance and simulating more complex visuals such as iridescence.\r\n- ``subsurface_profile`` (SubsurfaceProfile):  [Read-Write] SubsurfaceProfile, for Screen Space Subsurface Scattering. The profile needs to be set up on both the Substrate diffuse node, and the material node at the moment.\r\n- ``use_sss_diffusion`` (bool):  [Read-Write] Whether to use light diffusion (i.e., SSS diffusion) or wrap-approximation for material with scattering behavior. This option trades quality over performance and will result into visual differences.",
        "name": "MaterialExpressionStrataSlabBSDF"
    },
    {
        "doc": "Material Expression Strata Thin Film\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataThinFilm"
    },
    {
        "doc": "Material Expression Strata Transmittance to MFP\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataTransmittanceToMFP"
    },
    {
        "doc": "Material Expression Strata UI\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataUI"
    },
    {
        "doc": "Material Expression Strata Unlit BSDF\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataUnlitBSDF"
    },
    {
        "doc": "/\n Utilities\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataUtilityBase"
    },
    {
        "doc": "Material Expression Strata Vertical Layering\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``use_parameter_blending`` (bool):  [Read-Write] Merge Top and Base into a single material by mixing their inputs rather than their evaluation. This makes lighting evaluation cheaper (Default: off)",
        "name": "MaterialExpressionStrataVerticalLayering"
    },
    {
        "doc": "Material Expression Strata Volumetric Fog Cloud BSDF\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataVolumetricFogCloudBSDF"
    },
    {
        "doc": "Material Expression Strata Weight\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionStrata.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionStrataWeight"
    },
    {
        "doc": "Material output expression for setting the mean free path and scattering distribution properties of subsurface profile (for the Path Tracer Only).\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSubsurfaceMediumMaterialOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSubsurfaceMediumMaterialOutput"
    },
    {
        "doc": "Material Expression Subtract\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSubtract.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_a`` (float):  [Read-Write] only used if A is not hooked up\r\n- ``const_b`` (float):  [Read-Write] only used if B is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSubtract"
    },
    {
        "doc": "Material Expression Switch\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionSwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_default`` (float):  [Read-Write] only used if Selector is not hooked up\r\n- ``const_switch_value`` (float):  [Read-Write] only used if Selector is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``description`` (str):  [Read-Write]\r\n- ``inputs`` (Array[SwitchCustomInput]):  [Read-Write]\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionSwitch"
    },
    {
        "doc": "Material Expression Tangent\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTangent.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``period`` (float):  [Read-Write]",
        "name": "MaterialExpressionTangent"
    },
    {
        "doc": "Material Expression Tangent Output\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTangentOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionTangentOutput"
    },
    {
        "doc": "Material Expression Temporal Sobol\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTemporalSobol.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``const_index`` (uint32):  [Read-Write] Sobol point number. Only used if Index is not connected.\r\n- ``const_seed`` (Vector2D):  [Read-Write] 2D Seed for sequence randomization. Only used if Seed is not connected.\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionTemporalSobol"
    },
    {
        "doc": "deprecated: 'MaterialExpressionTerrainLayerCoords' was renamed to 'MaterialExpressionLandscapeLayerCoords'.",
        "name": "MaterialExpressionTerrainLayerCoords"
    },
    {
        "doc": "deprecated: 'MaterialExpressionTerrainLayerSwitch' was renamed to 'MaterialExpressionLandscapeLayerSwitch'.",
        "name": "MaterialExpressionTerrainLayerSwitch"
    },
    {
        "doc": "deprecated: 'MaterialExpressionTerrainLayerWeight' was renamed to 'MaterialExpressionLandscapeLayerWeight'.",
        "name": "MaterialExpressionTerrainLayerWeight"
    },
    {
        "doc": "Material Expression Texture Base\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTextureBase.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionTextureBase"
    },
    {
        "doc": "Material Expression Texture Coordinate\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTextureCoordinate.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``coordinate_index`` (int32):  [Read-Write] Texture coordinate index\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``u_tiling`` (float):  [Read-Write] Controls how much the texture tiles horizontally, by scaling the U component of the vertex UVs by the specified amount.\r\n- ``un_mirror_u`` (bool):  [Read-Write] Would like to unmirror U or V\r\n  - if the texture is mirrored and if you would like to undo mirroring for this texture sample, use this to unmirror\r\n- ``un_mirror_v`` (bool):  [Read-Write]\r\n- ``v_tiling`` (float):  [Read-Write] Controls how much the texture tiles vertically, by scaling the V component of the vertex UVs by the specified amount.",
        "name": "MaterialExpressionTextureCoordinate"
    },
    {
        "doc": "Material Expression Texture Object\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTextureObject.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionTextureObject"
    },
    {
        "doc": "Material Expression Texture Object Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTextureObjectParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``automatic_view_mip_bias`` (bool):  [Read-Write] Whether the texture should be sampled with per view mip biasing for sharper output with Temporal AA.\r\n- ``channel_names`` (ParameterChannelNames):  [Read-Write]\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_mip_value`` (int32):  [Read-Write] only used if MipValue is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``mip_value_mode`` (TextureMipValueMode):  [Read-Write] Defines how the MipValue property is applied to the texture lookup\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the UTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionTextureObjectParameter"
    },
    {
        "doc": "Material Expression Texture Property\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTextureProperty.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``property_`` (MaterialExposedTextureProperty):  [Read-Write] Texture property to be accessed",
        "name": "MaterialExpressionTextureProperty"
    },
    {
        "doc": "Material Expression Texture Sample\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTextureSample.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``automatic_view_mip_bias`` (bool):  [Read-Write] Whether the texture should be sampled with per view mip biasing for sharper output with Temporal AA.\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_mip_value`` (int32):  [Read-Write] only used if MipValue is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``mip_value_mode`` (TextureMipValueMode):  [Read-Write] Defines how the MipValue property is applied to the texture lookup\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the UTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionTextureSample"
    },
    {
        "doc": "Material Expression Texture Sample Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTextureSampleParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``automatic_view_mip_bias`` (bool):  [Read-Write] Whether the texture should be sampled with per view mip biasing for sharper output with Temporal AA.\r\n- ``channel_names`` (ParameterChannelNames):  [Read-Write]\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_mip_value`` (int32):  [Read-Write] only used if MipValue is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``mip_value_mode`` (TextureMipValueMode):  [Read-Write] Defines how the MipValue property is applied to the texture lookup\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the UTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionTextureSampleParameter"
    },
    {
        "doc": "Material Expression Texture Sample Parameter 2D\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTextureSampleParameter2D.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``automatic_view_mip_bias`` (bool):  [Read-Write] Whether the texture should be sampled with per view mip biasing for sharper output with Temporal AA.\r\n- ``channel_names`` (ParameterChannelNames):  [Read-Write]\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_mip_value`` (int32):  [Read-Write] only used if MipValue is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``mip_value_mode`` (TextureMipValueMode):  [Read-Write] Defines how the MipValue property is applied to the texture lookup\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the UTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionTextureSampleParameter2D"
    },
    {
        "doc": "Material Expression Texture Sample Parameter 2DArray\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTextureSampleParameter2DArray.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``automatic_view_mip_bias`` (bool):  [Read-Write] Whether the texture should be sampled with per view mip biasing for sharper output with Temporal AA.\r\n- ``channel_names`` (ParameterChannelNames):  [Read-Write]\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_mip_value`` (int32):  [Read-Write] only used if MipValue is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``mip_value_mode`` (TextureMipValueMode):  [Read-Write] Defines how the MipValue property is applied to the texture lookup\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the UTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionTextureSampleParameter2DArray"
    },
    {
        "doc": "deprecated: 'MaterialExpressionTextureSampleParameterBlur' was renamed to 'MaterialExpressionMaterialXTextureSampleParameterBlur'.",
        "name": "MaterialExpressionTextureSampleParameterBlur"
    },
    {
        "doc": "Material Expression Texture Sample Parameter Cube\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTextureSampleParameterCube.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``automatic_view_mip_bias`` (bool):  [Read-Write] Whether the texture should be sampled with per view mip biasing for sharper output with Temporal AA.\r\n- ``channel_names`` (ParameterChannelNames):  [Read-Write]\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_mip_value`` (int32):  [Read-Write] only used if MipValue is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``mip_value_mode`` (TextureMipValueMode):  [Read-Write] Defines how the MipValue property is applied to the texture lookup\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the UTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionTextureSampleParameterCube"
    },
    {
        "doc": "Material Expression Texture Sample Parameter Cube Array\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTextureSampleParameterCubeArray.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``automatic_view_mip_bias`` (bool):  [Read-Write] Whether the texture should be sampled with per view mip biasing for sharper output with Temporal AA.\r\n- ``channel_names`` (ParameterChannelNames):  [Read-Write]\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_mip_value`` (int32):  [Read-Write] only used if MipValue is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``mip_value_mode`` (TextureMipValueMode):  [Read-Write] Defines how the MipValue property is applied to the texture lookup\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the UTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionTextureSampleParameterCubeArray"
    },
    {
        "doc": "Material Expression Texture Sample Parameter Sub UV\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTextureSampleParameterSubUV.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``automatic_view_mip_bias`` (bool):  [Read-Write] Whether the texture should be sampled with per view mip biasing for sharper output with Temporal AA.\r\n- ``blend`` (bool):  [Read-Write]\r\n- ``channel_names`` (ParameterChannelNames):  [Read-Write]\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_mip_value`` (int32):  [Read-Write] only used if MipValue is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``mip_value_mode`` (TextureMipValueMode):  [Read-Write] Defines how the MipValue property is applied to the texture lookup\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the UTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionTextureSampleParameterSubUV"
    },
    {
        "doc": "Material Expression Texture Sample Parameter Volume\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTextureSampleParameterVolume.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``automatic_view_mip_bias`` (bool):  [Read-Write] Whether the texture should be sampled with per view mip biasing for sharper output with Temporal AA.\r\n- ``channel_names`` (ParameterChannelNames):  [Read-Write]\r\n- ``const_coordinate`` (uint8):  [Read-Write] only used if Coordinates is not hooked up\r\n- ``const_mip_value`` (int32):  [Read-Write] only used if MipValue is not hooked up\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``is_default_meshpaint_texture`` (bool):  [Read-Write] Is default selected texture when using mesh paint mode texture painting\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``mip_value_mode`` (TextureMipValueMode):  [Read-Write] Defines how the MipValue property is applied to the texture lookup\r\n- ``parameter_name`` (Name):  [Read-Write]\r\n- ``sampler_source`` (SamplerSourceMode):  [Read-Write] Controls where the sampler for this texture lookup will come from.\r\n  Choose 'from texture asset' to make use of the UTexture addressing settings,\r\n  Otherwise use one of the global samplers, which will not consume a sampler slot.\r\n  This allows materials to use more than 16 unique textures on SM5 platforms.\r\n- ``sampler_type`` (MaterialSamplerType):  [Read-Write]\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``texture`` (Texture):  [Read-Write]",
        "name": "MaterialExpressionTextureSampleParameterVolume"
    },
    {
        "doc": "Material output expression for setting absorption properties of thin translucent materials.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionThinTranslucentMaterialOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionThinTranslucentMaterialOutput"
    },
    {
        "doc": "Material Expression Time\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTime.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``ignore_pause`` (bool):  [Read-Write] This time continues advancing regardless of whether the game is paused.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``override_period`` (bool):  [Read-Write] Enables or disables the Period value.\r\n- ``period`` (float):  [Read-Write] Period at which to wrap around time",
        "name": "MaterialExpressionTime"
    },
    {
        "doc": "Material Expression Transform\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTransform.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``transform_source_type`` (MaterialVectorCoordTransformSource):  [Read-Write] Source coordinate space of the FVector\r\n- ``transform_type`` (MaterialVectorCoordTransform):  [Read-Write] Destination coordinate space of the FVector",
        "name": "MaterialExpressionTransform"
    },
    {
        "doc": "Material Expression Transform Position\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTransformPosition.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``transform_source_type`` (MaterialPositionTransformSource):  [Read-Write] source format of the position that will be transformed\r\n- ``transform_type`` (MaterialPositionTransformSource):  [Read-Write] type of transform to apply to the input expression",
        "name": "MaterialExpressionTransformPosition"
    },
    {
        "doc": "Material Expression Truncate\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTruncate.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionTruncate"
    },
    {
        "doc": "Material Expression Truncate LWC\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTruncateLWC.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionTruncateLWC"
    },
    {
        "doc": "Material Expression Two Sided Sign\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionTwoSidedSign.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionTwoSidedSign"
    },
    {
        "doc": "deprecated: 'MaterialExpressionUnpremult' was renamed to 'MaterialExpressionMaterialXUnpremult'.",
        "name": "MaterialExpressionUnpremult"
    },
    {
        "doc": "Material Expression Vector Noise\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionVectorNoise.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``noise_function`` (VectorNoiseFunction):  [Read-Write] Noise function, affects performance and look\r\n- ``quality`` (int32):  [Read-Write] For noise functions where applicable, lower numbers are faster and lower quality, higher numbers are slower and higher quality\r\n- ``tile_size`` (uint32):  [Read-Write] How many units in each tile (if Tiling is on)\r\n  For Perlin noise functions, Tile Size must be a multiple of three\r\n- ``tiling`` (bool):  [Read-Write] Whether tile the noise pattern, useful for baking to seam-free repeating textures",
        "name": "MaterialExpressionVectorNoise"
    },
    {
        "doc": "Material Expression Vector Parameter\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionVectorParameter.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``channel_names`` (ParameterChannelNames):  [Read-Write]\r\n- ``default_value`` (LinearColor):  [Read-Write]\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``group`` (Name):  [Read-Write] The name of the parameter Group to display in MaterialInstance Editor. Default is None group\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``parameter_name`` (Name):  [Read-Write] The name of the parameter\r\n- ``primitive_data_index`` (uint8):  [Read-Write]\r\n- ``sort_priority`` (int32):  [Read-Write] Controls where the this parameter is displayed in a material instance parameter list.  The lower the number the higher up in the parameter list.\r\n- ``use_custom_primitive_data`` (bool):  [Read-Write]",
        "name": "MaterialExpressionVectorParameter"
    },
    {
        "doc": "Material Expression Vertex Color\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionVertexColor.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionVertexColor"
    },
    {
        "doc": "Material Expression Vertex Interpolator\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionVertexInterpolator.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionVertexInterpolator"
    },
    {
        "doc": "Material Expression Vertex Normal WS\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionVertexNormalWS.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionVertexNormalWS"
    },
    {
        "doc": "Material Expression Vertex Tangent WS\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionVertexTangentWS.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionVertexTangentWS"
    },
    {
        "doc": "Material Expression View Property\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionViewProperty.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``property_`` (MaterialExposedViewProperty):  [Read-Write] View input property to be accessed",
        "name": "MaterialExpressionViewProperty"
    },
    {
        "doc": "Material Expression View Size\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionViewSize.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionViewSize"
    },
    {
        "doc": "Material output expression to switch logic according to whether virtual texturing is supported on this project, platform and feature level.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionVirtualTextureFeatureSwitch.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionVirtualTextureFeatureSwitch"
    },
    {
        "doc": "Material Expression Volumetric Advanced Material Input\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionVolumetricAdvancedMaterialInput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionVolumetricAdvancedMaterialInput"
    },
    {
        "doc": "Material output expression for writing advanced volumetric material properties.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionVolumetricAdvancedMaterialOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``clamp_multi_scattering_contribution`` (bool):  [Read-Write] Set whether multiple scattering contribution entry is clamped in [0,1] or not. When disabled, the artist is in charge for ensuring the visual remain in a reasonable brighness range.\r\n- ``const_multi_scattering_contribution`` (float):  [Read-Write] Only used if MultiScatteringContribution is not hooked up. Multi-scattering approximation: represents how much contribution each successive octave will add. Valid range is [0,1], from low to high contribution\r\n- ``const_multi_scattering_eccentricity`` (float):  [Read-Write] Only used if MultiScatteringEccentricity is not hooked up. Multi-scattering approximation: represents how much the phase will become isotropic for each successive octave. Valid range is [0,1], from anisotropic to isotropic phase.\r\n- ``const_multi_scattering_occlusion`` (float):  [Read-Write] Only used if MultiScatteringOcclusion is not hooked up. Multi-scattering approximation: represents how much occlusion will be reduced for each successive octave. Valid range is [0,1], from low to high occlusion.\r\n- ``const_phase_blend`` (float):  [Read-Write] Only used if PhaseBlend is not hooked up. Lerp factor when blending the two phase functions parameterized by G and G2. Valid range is [0,1].\r\n- ``const_phase_g`` (float):  [Read-Write] Only used if PhaseG is not hooked up. Parameter 'g' input to the phase function  describing how much forward(g<0) or backward (g>0) light scatter around.\r\n- ``const_phase_g2`` (float):  [Read-Write] Only used if PhaseG2 is not hooked up. Parameter 'g' input to the second phase function  describing how much forward(g<0) or backward (g>0) light scatter around. Valid range is [-1,1].\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``gray_scale_material`` (bool):  [Read-Write] Set this for the material to only be considered grey scale, only using the R chanel of the input parameters internally. The lighting will still be colored. This is an optimisation.\r\n- ``ground_contribution`` (bool):  [Read-Write] Sample the shadowed lighting contribution from the ground onto the medium (single scattering). This adds some costs to the tracing when enabled.\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``multi_scattering_approximation_octave_count`` (uint32):  [Read-Write] How many octave to use for the multiple-scattering approximation. This makes the shader more expensive so you should only use 0 or 1 for better performance, and tweak multiple scattering parameters accordingly. 0 means single scattering only. The maximum value is 2 (expenssive).\r\n- ``per_sample_phase_evaluation`` (bool):  [Read-Write] Set this to true to force the phase function to be evaluated per sample, instead once per pixel (globally). Per sample evaluation is slower.\r\n- ``ray_march_volume_shadow`` (bool):  [Read-Write] Disable this to use the cloud shadow map instead of secondary raymarching. This is usually enough for clouds viewed from the ground and it result in a performance boost. Shadow now have infinite length but also becomes less accurate and gray scale.",
        "name": "MaterialExpressionVolumetricAdvancedMaterialOutput"
    },
    {
        "doc": "Material Expression Volumetric Cloud Empty Space Skipping Input\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionVolumetricAdvancedMaterialInput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionVolumetricCloudEmptySpaceSkippingInput"
    },
    {
        "doc": "USed to help the cloud system to fast skip empty space areas when ray marching.\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionVolumetricAdvancedMaterialOutput.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput"
    },
    {
        "doc": "Material Expression While Loop\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionWhileLoop.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]",
        "name": "MaterialExpressionWhileLoop"
    },
    {
        "doc": "Material Expression World Position\r\n\r\n**C++ Source:**\r\n\r\n- **Module**: Engine\r\n- **File**: MaterialExpressionWorldPosition.h\r\n\r\n**Editor Properties:** (see get_editor_property/set_editor_property)\r\n\r\n- ``desc`` (str):  [Read-Write] A description that level designers can add (shows in the material editor UI).\r\n- ``material_expression_editor_x`` (int32):  [Read-Write]\r\n- ``material_expression_editor_y`` (int32):  [Read-Write]\r\n- ``world_position_shader_offset`` (WorldPositionIncludedOffsets):  [Read-Write]",
        "name": "MaterialExpressionWorldPosition"
    }
]